data <- ToothGrowth
CRD <- aov(len~supp, data)
summary(CRD)
TukeyHSD(CRD)
pairwise.t.test(data$len, data$dose, p.adjust.method = "none")
pairwise.t.test(data$len, data$supp, p.adjust.method = "none")
Mod_CRD <- lm(len~supp, data)
summary(Mod_CRD)
CRD <- aov(len~dose, data)
summary(CRD)
Mod_CRD <- lm(len~dose, data)
summary(Mod_CRD)
install.packages("pastecs")
install.packages("reshape2")
install.packages("rJava")
install.packages("RWeka")
install.packages("ROCR")
install.packages("partykit")
install.packages("e1071")
install.packages("car")
install.packages("glmnet")
install.packages("arules")
install.packages("arulesViz")
install.packages("arulesSequences")
install.packages("wordcloud")
install.packages("tm")
install.packages("twitteR")
install.packages("plyr")
install.packages ("stringr")
install.packages ("shiny")
install.packages ("TTR")
install.packages("xlsx")
install.packages("data.table")
install.packages("MASS")
install.packages("ggplot2")
install.packages("RODBC")
install.packages("treemap")
install.packages("dplyr")
install.packages("installr")
install.packages("sqldf")
install.packages("XLConnect")
install.packages("caret")
install.packages("chron")
install.packages("Rglpk")
install.packages("markovchain")
install.packages("queueing")
install.packages("projmanr")
install.packages("igraph")
deltime <- read.csv('deliverytime.csv')
setwd("D:/School Tutorials/ie282122")
deltime <- read.csv('deliverytime.csv')
ggplot(data, aes(x=gdpPercap, y=lifeExp, size = pop)) +
geom_point(alpha=0.7)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7)
library(ggplot2)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7) +
geom_smooth(method=lm)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7) +
geom_smooth(method=lm, se=FALSE)
lm_deltime <- lm(deltime~distance+ncases, deltime)
summary(lm_deltime)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7) +
geom_smooth(method='lm', se=FALSE)
ggplot(deltime, aes(x=distance, y=deltime, size = ncases)) +
geom_point(alpha=0.7)
lec12_2 <- read.csv('lec12-2.csv')
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7)
lec12_2 <- read.csv('lec12-2.csv')
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7) +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y, size=12)) +
geom_point(alpha=0.7) +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7) +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=12) +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3) +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3, col='r') +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(y~x, method="lm", se=FALSE)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(formula = y~x, method="lm", se=FALSE)
lm_example <- lm(y~x, lec12_2)
summary(lm_example)
lec12_2 <- read.csv('lec12-1.csv')
lec12_2 <- read.csv('lec12-1.csv')
library(ggplot2)
ggplot(lec12_2, aes(x=absent, y=defects)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(formula = y~x, method="lm", se=FALSE)
lm_example1 <- lm(absent~defects, lec12_1)
lec12_1 <- read.csv('lec12-1.csv')
library(ggplot2)
ggplot(lec12_2, aes(x=absent, y=defects)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(formula = y~x, method="lm", se=FALSE)
lm_example1 <- lm(absent~defects, lec12_1)
summary(lm_example1)
# Let's define a DataFrame manually
xdata <- c(11, 6, 14, 8, 14)
ydata <- c(-35, -18, -46, -22, -45)
example3 <- data.frame(x=xdata, y=ydata)
ggplot(example3, aes(x=xdata, y=ydata)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(formula = y~x, method="lm", se=FALSE)
# summarizing 2 lines into 1
summary(lm(y~x, example3))
Sxx = sum(example3$x^2)
Sxx = sum(example3$x^2) - sum(example3$x)^2/count(example3$x)
Sxx = sum(example3$x^2) - sum(example3$x)^2/length(example3$x)
Sxx = sum(example3$x^2) - sum(example3$x)^2/length(example3)
Sxy = sum(example3$x*example3$y) - sum(example3$x)*sum(example3$x)/length(example3)
length(example3)
length(example3)
nrow(example3)
Sxx = sum(example3$x^2) - sum(example3$x)^2/nrow(example3)
Sxy = sum(example3$x*example3$y) - sum(example3$x)*sum(example3$x)/nrow(example3)
lm(y~x, example3)
lec12_2 <- read.csv('lec12-2.csv')
library(ggplot2)
ggplot(lec12_2, aes(x=x, y=y)) +
geom_point(alpha=0.7, size=3, col='red') +
geom_smooth(formula = y~x, method="lm", se=FALSE)
lm_example2 <- lm(y~x, lec12_2)
lm_example2
summary(lm(y~x, example3))
summe3 <- summary(lm(y~x, example3))
summary(lm(y~x, example3))$sigma
x-bar = average(example3$x)
x-bar = mean(example3$x)
summe3$coefficients
lme3 <- lm(y~x, example3)
lme3$coefficients
lme3$coefficients[0]
lm3coeff <- lme3$coefficients
lme3$coefficients[1]
intercept <- lme3$coefficients[1]
intercept*2
intercept <- lme3$coefficients[[1]]
intercept <- lm(y~x, example3)$coefficients[[1]]
slope <- lm(y~x, example3)$coefficients[[2]]
t0_slope = (b1 - b1_hyp)/
(sigma^2/Sxx)^(0.5)
x-bar = mean(example3$x)
n = nrow(example3)
b0 <- lm(y~x, example3)$coefficients[[1]]
b1 <- lm(y~x, example3)$coefficients[[2]]
b0_hyp <- 3
b1_hyp <- -4
t0_slope = (b1 - b1_hyp)/
(sigma^2/Sxx)^(0.5)
sigma = summary(lm(y~x, example3))$sigma
t0_slope = (b1 - b1_hyp)/
(sigma^2/Sxx)^(0.5)
t0_int = (b0 - b0_hyp) / (sigma^2 * ( 1/n + xbar^2/Sxx))^(0.5)
x-bar = mean(example3$x)
xbar = mean(example3$x)
t0_int = (b0 - b0_hyp) / (sigma^2 * ( 1/n + xbar^2/Sxx))^(0.5)
t0_slope
t0_int
View(lme3)
summe3
View(summe3)
summe3$df
lm(y~x, example3)$df.residual
# summarizing 2 lines into 1]
lme3 <- lm(y~x, example3)
summe3 <- summary(lme3)
summe3
sigma = summe3$sigma
dfe = lme3$df.residual
qt(1-alpha/2, dfe)
alpha = 0.05
qt(1-alpha/2, dfe)
t_crit = qt(1-alpha/2, dfe) # for both since we have same df errors
t_crit
b0_hyp <- 0
b1_hyp <- 0
t0_slope = (b1 - b1_hyp) / (sigma^2/Sxx)^(0.5)
t0_int = (b0 - b0_hyp) / (sigma^2 * ( 1/n + xbar^2/Sxx))^(0.5)
# Reject H0 for slope?
t0_slope > t_crit
# Reject H0 for int?
t0_int > t_crit
b0_hyp <- 3
b1_hyp <- -4
t0_slope = (b1 - b1_hyp) / (sigma^2/Sxx)^(0.5)
t0_int = (b0 - b0_hyp) / (sigma^2 * ( 1/n + xbar^2/Sxx))^(0.5)
t0_slope
t0_int
dfe = lme3$df.residual
alpha = 0.05
t_crit = qt(1-alpha/2, dfe) # for both since we have same df errors
# Reject H0 for slope?
t0_slope > t_crit
# Reject H0 for int?
t0_int > t_crit
